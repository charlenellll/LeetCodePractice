class Solution {
private:
    vector<vector<int>> res;
    vector<bool> used;
    
    // use p to store the permutation generated by index numbers
    // generate permutations by adding (index+1)th number to the end
    void generatePermutation(const vector<int>& nums, int index, vector<int>& p){
        
        if( index == nums.size() ){
            res.push_back(p);
            return;
        }
        
        for(int i = 0; i < nums.size(); i++ ){
            if( !used[i] ){ // used[i] is false = nums[i] is not used yet
                // add it on p
                p.push_back(nums[i]);
                used[i] = true;
                generatePermutation(nums, index+1, p);
                // Backtracking : this is crucial and easy to forget
                p.pop_back();
                used[i] = false;
            }
        }
        
        return;
    }
    
public:
    vector<vector<int>> permute(vector<int>& nums) {
        
        res.clear();
        if( nums.size() == 0 )
            return res;
        
        used = vector<bool>(nums.size(), false);
        vector<int> p;
        generatePermutation(nums, 0, p);
        
        return res;
    }
};